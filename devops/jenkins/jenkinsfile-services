pipeline {

    agent {
        docker {
            image 'docker:dind'
            args '-u root:root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        APP_PATH = "apps/hello-world"
        DOCKER_REGISTRY = "ghcr.io/dos11-onl"
        DOCKER_CRED = 'github_PAT'
        TAG = "latest"
        SERVICES_FILE = "devops/services.json"
        TELEGRAM_CRED = 'telegram-token'
        CHAT_ID = '-1001926338613'
        REPO_OWNER = 'DOS11-onl'
        REPO = 'simple-java-maven-app'
        
    }
    
    stages {
        stage('Prepare') {
            steps {
                script {
                    func = load 'devops/jenkins/func.groovy'
                    println("BRANCH - ${BRANCH_NAME}")
                    println("PRID - ${env.CHANGE_ID}")
                    if (BRANCH_NAME == 'master') {
                        TAG = 'latest'
                    } else {
                        TAG = env.CHANGE_ID
                    }

                    apps = readJSON file: SERVICES_FILE
                    println ("START APPS: ${apps}")
                }
            }
        }

        stage('Get diff') {
            steps {
                script {
                    PR_DIFF = []
                    APPS_REMOVE_LIST = []
                    PR_ID = func.getPrId(env.BRANCH_NAME)
                    requestURL="https://api.github.com/repos/${REPO_OWNER}/${REPO}/pulls/${PR_ID}/files"
                    withCredentials([usernamePassword(credentialsId: 'github_PAT', passwordVariable: 'pass', usernameVariable: 'user')]) {
                        PR_JSON_DIFF_DATA  = func.httpRequestGet(requestURL, pass)
                    }

                    PR_DIFF_DATA = readJSON text: PR_JSON_DIFF_DATA
                    PR_DIFF_DATA.each { item ->
                        PR_DIFF.add(item.filename)
                    }
                    println ("PR_DIFF: ${PR_DIFF}")

                    // check is Changed
                    apps.each { app ->
                        if (!func.isChanged(PR_DIFF, app.value.path)) {
                            APPS_REMOVE_LIST.add(app.key)
                            println ("Add ${app.key} service to REMOVE LIST")
                        }
                    }

                    // remove unchanged from apps
                    APPS_REMOVE_LIST.each { app ->
                        apps.remove(app)
                    }
                    println ("FINISH APPS: ${apps}")
                    Integer PARALLEL_EXECUTE_COUNT = 2
                    buildStages = func.stagePrepare(apps, PARALLEL_EXECUTE_COUNT)
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    buildStages.each { build ->
                        parallel build
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    apps.each { app, value ->
                        dir(value.path) {
                            sh """
                            [ -d target ] || mkdir target
                            docker run --name ${app} ${app} mvn test &&
                            docker cp ${app}:/app/target/surefire-reports/ target/surefire-reports/
                            docker rm -f ${app}
                            """
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        apps.each { app, value ->
                            dir(value.path) {
                                junit 'target/surefire-reports/*.xml'
                            }
                        }
                    }
                }
            }
        }

        stage('Create image') {
            when { expression { BRANCH_NAME == 'master'}}
            steps {
                script {
                    apps.each { app, value ->
                        dir(value.path) {
                            sh"""
                            [ -d target ] || mkdir target
                            docker create --name ${app} ${app}
                            docker cp ${app}:/app/target/my-app-1.0-SNAPSHOT.jar target/
                            ls -la target/
                            docker rm -f ${app}
                            docker build -t ${DOCKER_REGISTRY}/${app}:${TAG} -f Dockerfile-create .
                            """
                        }
                    }
                }
            }
        }

        stage('Push image') {
            when { expression { BRANCH_NAME == 'master'}}
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CRED, passwordVariable: 'pass', usernameVariable: 'user')]) {
                        sh "echo ${pass} | docker login ghcr.io -u ${user} --password-stdin"
                        apps.each { app, value ->
                            sh "docker push ${DOCKER_REGISTRY}/${app}:${TAG}"
                        }
                    }
                }
            }
        }
    }

    post { 
        always { 
            cleanWs()
            // withCredentials([string(credentialsId: TELEGRAM_CRED, variable: 'TOKEN')]) {
            //     sh """
            //         curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage
            //         -d chat_id=${CHAT_ID}
            //         -d parse_mode=markdown
            //         -d text='*${env.JOB_NAME}* *BRANCH:* ${env.BRANCH_NAME} *BUILD:* ${currentBuild.currentResult}'
            //     """
            // }
        }
    }
}
